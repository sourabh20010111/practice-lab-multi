**CSS Best Practices** so your styling stays clean, maintainable, and professional.

---

## ðŸ“Œ 1. Naming Conventions

* **Use clear, meaningful names** â€” avoid `div1`, `box2`
* **Lowercase + hyphens** for multi-word names â†’ `main-header`, `btn-primary`
* If project is big â†’ consider **BEM (Block Element Modifier)**
  Example:

  ```css
  /* Block */
  .card {}
  /* Element */
  .card__title {}
  /* Modifier */
  .card--highlight {}
  ```

---

## ðŸ“Œ 2. File Structure

```
project/
â”‚â”€â”€ index.html
â”‚â”€â”€ css/
â”‚   â”œâ”€â”€ style.css
â”‚   â”œâ”€â”€ reset.css  /* Optional: Reset browser default styles */
â”‚â”€â”€ images/
â”‚â”€â”€ js/
â”‚   â”œâ”€â”€ script.js
```

---

## ðŸ“Œ 3. Keep CSS DRY (Donâ€™t Repeat Yourself)

* Use **CSS Variables** for repeating values
* Use **shared classes** instead of duplicating rules
* Example:

  ```css
  .btn {
    padding: 10px 20px;
    border-radius: 5px;
  }
  .btn-primary { background: blue; }
  .btn-secondary { background: gray; }
  ```

---

## ðŸ“Œ 4. Organize Your CSS

* **Top to bottom order**:

  1. Reset / Normalize styles
  2. Variables
  3. Base styles (body, headings, links)
  4. Layout (grid, flex containers)
  5. Components (buttons, cards)
  6. Utilities (small helper classes)

---

## ðŸ“Œ 5. Performance Tips

* Combine and minify CSS in production
* Use shorthand properties where possible (`margin: 10px 20px;`)
* Avoid deep selectors like `.header nav ul li a {}` â€” keep it short
* Use **`will-change`**, `transform`, and `opacity` for smoother animations

---

Now that CSS is **fully covered from basics to advanced**